from datetime import datetime, timedelta

from aiogram import F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from database import Session
from database.repo_booktime import BookTimeRepository
from loader import form_router


@form_router.message(Command('weekly'))
@form_router.message(F.text == 'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
@form_router.message(F.text == '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è')
@form_router.message(F.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è')
async def weekly_show(message: types.Message, state: FSMContext):
    if message.text in ['/weekly', 'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é']:
        week = 0
        await state.clear()
    else:
        data = await state.get_data()
        week = data.get('week')

    if message.text == '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è':
        week -= 1
    elif message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
        week += 1

    builder = ReplyKeyboardBuilder()
    if week > 0:
        builder.add(types.KeyboardButton(text='–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è'))
    builder.add(types.KeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è'))
    builder.adjust(2)

    days_translation = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    msg = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é \\(' +
           (datetime.today() + timedelta(weeks=week, days=0 - datetime.today().weekday())).strftime("%d\\.%m") + '\\-' +
           (datetime.today() + timedelta(weeks=week, days=6 - datetime.today().weekday())).strftime("%d\\.%m") + '\\)\n'
           ]

    for i in range(0, 7):
        day = datetime.today() + timedelta(weeks=week, days=i - datetime.today().weekday())
        records = BookTimeRepository(Session()).get_bookings_by_date(day.strftime('%d.%m'), fetch=True)
        if records:
            msg.append(f'{days_translation[day.strftime("%A")]}' + r'\(' + day.strftime(r"%d\.%m") + r'\)')
        for startTime, endTime, reason, renter in records:
            msg.append(
                f"```\n–í—Ä–µ–º—è: {startTime}-{endTime}\n–¢–µ–º–∞: {reason}\n–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: @{renter}```"
            )
        if records and i < 6:
            msg.append('')

    if len(msg) == 1:
        msg.append('–ü—É—Å—Ç–æ')

    await message.answer(
        '\n'.join(msg),
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
        parse_mode='MarkdownV2'
    )

    await state.update_data(week=week)
